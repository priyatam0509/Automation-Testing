"""
    File name: Hd_Passport_Activation.py
    Tags:
    Description: SL-1652/1795 - Tool to encrypt expiry date
    Brand: Concord
    Author: Paresh
    Date created: 2020-30-03 19:11:00
    Date last modified:
    Python Version: 3.7
"""

import logging, pywinauto, time
from app.util import constants
from pywinauto import Application
from app.framework.tc_helpers import setup, test, teardown, tc_fail

activation_tool_path = constants.TESTING_TOOLS + r'\HDActivation.exe'
Controls = {
            "Software Upgrade Approval Code": "Software Upgrade Approval Code",
            "Generate Approval Code": "Generate Approval Code",
            "Clear": "Clear",
            "Gilbarco ID": "Edit5",
            "Approval Code 1": "Edit3",
            "Approval Code 2": "Edit4",
            "Approval Code 3": "Edit2",
            "Approval Code 4": "Edit1"
        }


class Hd_Passport_Activation():
    """
    Description: Test class that provides an interface for testing.
    """
    def __init__(self):
        """Initializes the Template class.
        Args: None
        Returns: None
        """
        # The logging object.
        # Example: self.log.info(f"Current value of var: {my_var}")
        self.log = logging.getLogger()
 
    @setup
    def setup(self):
        """
        Performs any initialization that is not default.
        Args: None
        Returns: None
        """
        pass
  
    @test
    def verify_validation_for_blank_id(self):
        """
        Testlink Id: SL-1652/1795 - Tool to encrypt expiry date
		Description: Verify validation message for blank gilbarco id
        Args: None
        Returns: None
        """

        # Open HD activation tool
        hdpassportactivation = pywinauto.application.Application().start(activation_tool_path)
        app = hdpassportactivation['Passport Activation Utility']
        app.wait('ready', 5)

		# Verify Software Upgrade Aprroval Code radio button is visible
        app[Controls["Software Upgrade Approval Code"]].click()
        time.sleep(.5)
		
		# Verify Generate Approval Code button is visible
        app[Controls["Generate Approval Code"]].click()
        time.sleep(.5)
		
		# Verify validation message by entering blank gilbarco id
        app = hdpassportactivation['Help Desk Activation']
        app.wait('ready', 5)

        if not app["Gilbarco ID is a required field"].is_visible():
            tc_fail("Unable to see invalid message pop-up")

        app["OK"].click()
        time.sleep(.5)
        
        return True

    @test
    def verify_validation_for_invalid_id(self):
        """
        Testlink Id: SL-1652/1795 - Tool to encrypt expiry date
		Description: Verify validation message for invalid gilbarco id
        Args: None
        Returns: None
        """

        app = Application().connect(path="HDActivation.exe")
        app1 = app['Passport Activation Utility']
        app1.wait('ready', 5)
        
        # Validate the error message by entering wrong gilbarco id
        app1[Controls["Gilbarco ID"]].type_keys("1234")
        time.sleep(.5)
        if app1[Controls["Gilbarco ID"]].texts()[0] != "1234":
            tc_fail("Unable to set gilbarco id value")
			
        app1[Controls["Generate Approval Code"]].click()
        time.sleep(.5)
        
        app1 = app['Help Desk Activation']
        app1.wait('ready', 5)
        
        if not app1["You have entered an invalid Gilbarco id"].is_visible():
            tc_fail("Unable to see invalid message pop-up")
        
        app1["OK"].click()
        time.sleep(.5)

        return True
   
    @test
    def verify_numeric_and_sixDigit_value_for_gilbarcoID(self):
        """
        Testlink Id: SL-1652/1795 - Tool to encrypt expiry date
		Description: Verify Gilbarco ID field is allow only numeric value and six digit value
        Args: None
        Returns: None
        """

        app = Application().connect(path="HDActivation.exe")
        app1 = app['Passport Activation Utility']
        app1.wait('ready', 5)
        
        # Validate error message by entering 7 digit gilbarco id
        app1[Controls["Gilbarco ID"]].type_keys("1234567")
        time.sleep(.5)
        if app1[Controls["Gilbarco ID"]].texts()[0] == "1234567":
            tc_fail("Gilbarco id allow more than 7 digit value")
        
        # Validate error message by entering non numeric gilbarco id
        app1[Controls["Gilbarco ID"]].type_keys("abcdef")
        time.sleep(.5)

        if app1[Controls["Gilbarco ID"]].texts()[0] == "abcdef":
            tc_fail("Gilbarco id allow non numeric value")

        return True
 
    @test
    def verify_approval_code_generated(self):
        """
        Testlink Id: SL-1652/1795 - Tool to encrypt expiry date
		Description: Verify approval code is generated by entering the valid gilbarco id
        Args: None
        Returns: None
        """

        app = Application().connect(path="HDActivation.exe")
        app1 = app['Passport Activation Utility']
        app1.wait('ready', 5)
        
        # Validate Aprroval code is generated
        app1[Controls["Gilbarco ID"]].type_keys("123456")
        time.sleep(.5)
        
        app1[Controls["Generate Approval Code"]].click()
        time.sleep(.5)
        
        approval_code = [app1[Controls[f"Approval Code {i}"]].texts()[0] for i in range(1, 5) ]
        if len(approval_code) == 0:
            tc_fail("Approval code is not generated")

        return True

    @test
    def verify_clear_button(self):
        """
        Testlink Id: SL-1652/1795 - Tool to encrypt expiry date
		Description: Verify clear button is working
        Args: None
        Returns: None
        """

        app = Application().connect(path="HDActivation.exe")
        app1 = app['Passport Activation Utility']
        app1.wait('ready', 5)
        
        app1[Controls["Clear"]].click()
        time.sleep(.5)
        
        return True

    @teardown
    def teardown(self):
        """
        Performs cleanup after this script ends.
        """
        app = Application().connect(path="HDActivation.exe")
        app.kill()